# Generated by Django 5.2.1 on 2025-07-30 17:59

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("datastore_api", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="DatasetBaseModel",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the dataset typically the name of the table or collection.",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "short_description",
                    models.CharField(
                        help_text="Brief text description of the dataset's purpose",
                        max_length=1000,
                    ),
                ),
                (
                    "data_structure",
                    models.CharField(
                        choices=[
                            ("structured", "Structured"),
                            ("semi_structured", "Semi-Structured"),
                            ("unstructured", "Unstructured"),
                        ],
                        help_text="The data structure of the dataset",
                        max_length=20,
                    ),
                ),
                (
                    "growth_rate",
                    models.CharField(
                        choices=[
                            ("high", "High"),
                            ("medium", "Medium"),
                            ("low", "Low"),
                        ],
                        help_text="The growth rate of the dataset",
                        max_length=20,
                    ),
                ),
                (
                    "access_patterns",
                    models.CharField(
                        choices=[
                            ("read_heavy", "Read Heavy"),
                            ("write_heavy", "Write Heavy"),
                            ("read_write_heavy", "Read/Write Heavy"),
                            ("analytical", "Analytical"),
                            ("transactional", "Transactional"),
                        ],
                        help_text="The access pattern of the dataset",
                        max_length=20,
                    ),
                ),
                (
                    "query_complexity",
                    models.CharField(
                        choices=[
                            ("high", "High"),
                            ("medium", "Medium"),
                            ("low", "Low"),
                        ],
                        help_text="The related query complexity",
                        max_length=20,
                    ),
                ),
                (
                    "properties",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="JSON list of column names or data properties",
                    ),
                ),
                (
                    "sample_data",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="JSON list containing sample data rows",
                    ),
                ),
                (
                    "estimated_size_gb",
                    models.FloatField(
                        blank=True,
                        help_text="Estimated dataset size in gigabytes",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "avg_query_time_ms",
                    models.FloatField(
                        blank=True,
                        help_text="Average query execution time in milliseconds",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "queries_per_day",
                    models.FloatField(
                        blank=True,
                        help_text="Estimated number of queries per day",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "current_datastore_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="The datastore where this dataset is currently stored",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="datasets",
                        to="datastore_api.datastore",
                    ),
                ),
            ],
            options={
                "db_table": "dataset_api_datasets",
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="DatasetQueries",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive name for query", max_length=255
                    ),
                ),
                (
                    "query_text",
                    models.TextField(help_text="The actual query/command text"),
                ),
                (
                    "query_type",
                    models.CharField(
                        choices=[
                            ("select", "Select"),
                            ("insert", "Insert"),
                            ("update", "Update"),
                            ("delete", "Delete"),
                            ("complex", "Complex"),
                            ("aggregate", "Aggregate"),
                        ],
                        help_text="Type of query",
                        max_length=20,
                    ),
                ),
                (
                    "frequency",
                    models.CharField(
                        choices=[
                            ("high", "High"),
                            ("medium", "Medium"),
                            ("low", "Low"),
                        ],
                        help_text="How often this query runs",
                        max_length=20,
                    ),
                ),
                (
                    "avg_execution_time_ms",
                    models.FloatField(
                        blank=True,
                        help_text="Average execution time in milliseconds",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Optional query description"
                    ),
                ),
                (
                    "dataset_id",
                    models.ForeignKey(
                        help_text="Related dataset ID",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="queries",
                        to="dataset_api.datasetbasemodel",
                    ),
                ),
            ],
            options={
                "db_table": "dataset_api_dataset_queries",
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="DatasetRelationshipModel",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "relationship_type",
                    models.CharField(
                        choices=[
                            ("foreign_key", "Foreign Key"),
                            ("one_to_many", "One to Many"),
                            ("many_to_many", "Many to Many"),
                            ("dependency", "Dependency"),
                            ("similarity", "Similarity"),
                        ],
                        help_text="Type of the relationship between the datasets.",
                        max_length=20,
                    ),
                ),
                (
                    "strength",
                    models.PositiveIntegerField(
                        help_text="Relationship importance (1-10 scale)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Optional description of the relationship"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Boolean Flag indicating if relationship is active",
                    ),
                ),
                (
                    "from_dataset_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="Source dataset ID",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="relationships_from",
                        to="dataset_api.datasetbasemodel",
                    ),
                ),
                (
                    "to_dataset_id",
                    models.ForeignKey(
                        blank=True,
                        help_text="Target dataset ID",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="relationships_to",
                        to="dataset_api.datasetbasemodel",
                    ),
                ),
            ],
            options={
                "db_table": "dataset_api_dataset_relationships",
                "ordering": ["id"],
            },
        ),
        migrations.AddIndex(
            model_name="datasetbasemodel",
            index=models.Index(fields=["name"], name="dataset_api_name_ad3313_idx"),
        ),
        migrations.AddIndex(
            model_name="datasetbasemodel",
            index=models.Index(
                fields=["data_structure"], name="dataset_api_data_st_6eef61_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="datasetbasemodel",
            index=models.Index(
                fields=["current_datastore_id"], name="dataset_api_current_04a9f6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="datasetbasemodel",
            index=models.Index(
                fields=["created_at"], name="dataset_api_created_cda559_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="datasetqueries",
            index=models.Index(
                fields=["dataset_id"], name="dataset_api_dataset_f96010_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="datasetqueries",
            index=models.Index(
                fields=["query_type"], name="dataset_api_query_t_97a535_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="datasetqueries",
            index=models.Index(
                fields=["created_at"], name="dataset_api_created_9ec7ee_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="datasetrelationshipmodel",
            index=models.Index(
                fields=["from_dataset_id"], name="dataset_api_from_da_67e8f9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="datasetrelationshipmodel",
            index=models.Index(
                fields=["to_dataset_id"], name="dataset_api_to_data_5a1aed_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="datasetrelationshipmodel",
            index=models.Index(
                fields=["created_at"], name="dataset_api_created_a418b9_idx"
            ),
        ),
    ]
